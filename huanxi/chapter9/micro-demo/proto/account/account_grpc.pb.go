// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	GetAccountList(ctx context.Context, in *PagingReq, opts ...grpc.CallOption) (*AccountListRes, error)
	GetAccountByMobile(ctx context.Context, in *MobileReq, opts ...grpc.CallOption) (*MobileRes, error)
	GetAccountByID(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*IDRes, error)
	AddAccount(ctx context.Context, in *AddAccountReq, opts ...grpc.CallOption) (*AddAccountRes, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountReq, opts ...grpc.CallOption) (*UpdateAccountRes, error)
	CheckAccountByID(ctx context.Context, in *CheckAccountByIDReq, opts ...grpc.CallOption) (*CheckAccountByIDRes, error)
	DeleceAccount(ctx context.Context, in *DeleteAccountReq, opts ...grpc.CallOption) (*DeleteAccountRes, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) GetAccountList(ctx context.Context, in *PagingReq, opts ...grpc.CallOption) (*AccountListRes, error) {
	out := new(AccountListRes)
	err := c.cc.Invoke(ctx, "/account.AccountService/GetAccountList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountByMobile(ctx context.Context, in *MobileReq, opts ...grpc.CallOption) (*MobileRes, error) {
	out := new(MobileRes)
	err := c.cc.Invoke(ctx, "/account.AccountService/GetAccountByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountByID(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*IDRes, error) {
	out := new(IDRes)
	err := c.cc.Invoke(ctx, "/account.AccountService/GetAccountByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AddAccount(ctx context.Context, in *AddAccountReq, opts ...grpc.CallOption) (*AddAccountRes, error) {
	out := new(AddAccountRes)
	err := c.cc.Invoke(ctx, "/account.AccountService/AddAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountReq, opts ...grpc.CallOption) (*UpdateAccountRes, error) {
	out := new(UpdateAccountRes)
	err := c.cc.Invoke(ctx, "/account.AccountService/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CheckAccountByID(ctx context.Context, in *CheckAccountByIDReq, opts ...grpc.CallOption) (*CheckAccountByIDRes, error) {
	out := new(CheckAccountByIDRes)
	err := c.cc.Invoke(ctx, "/account.AccountService/CheckAccountByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleceAccount(ctx context.Context, in *DeleteAccountReq, opts ...grpc.CallOption) (*DeleteAccountRes, error) {
	out := new(DeleteAccountRes)
	err := c.cc.Invoke(ctx, "/account.AccountService/DeleceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	GetAccountList(context.Context, *PagingReq) (*AccountListRes, error)
	GetAccountByMobile(context.Context, *MobileReq) (*MobileRes, error)
	GetAccountByID(context.Context, *IDReq) (*IDRes, error)
	AddAccount(context.Context, *AddAccountReq) (*AddAccountRes, error)
	UpdateAccount(context.Context, *UpdateAccountReq) (*UpdateAccountRes, error)
	CheckAccountByID(context.Context, *CheckAccountByIDReq) (*CheckAccountByIDRes, error)
	DeleceAccount(context.Context, *DeleteAccountReq) (*DeleteAccountRes, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) GetAccountList(context.Context, *PagingReq) (*AccountListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountList not implemented")
}
func (UnimplementedAccountServiceServer) GetAccountByMobile(context.Context, *MobileReq) (*MobileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByMobile not implemented")
}
func (UnimplementedAccountServiceServer) GetAccountByID(context.Context, *IDReq) (*IDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByID not implemented")
}
func (UnimplementedAccountServiceServer) AddAccount(context.Context, *AddAccountReq) (*AddAccountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccount not implemented")
}
func (UnimplementedAccountServiceServer) UpdateAccount(context.Context, *UpdateAccountReq) (*UpdateAccountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedAccountServiceServer) CheckAccountByID(context.Context, *CheckAccountByIDReq) (*CheckAccountByIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccountByID not implemented")
}
func (UnimplementedAccountServiceServer) DeleceAccount(context.Context, *DeleteAccountReq) (*DeleteAccountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleceAccount not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_GetAccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/GetAccountList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountList(ctx, req.(*PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccountByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MobileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/GetAccountByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountByMobile(ctx, req.(*MobileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccountByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/GetAccountByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountByID(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/AddAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AddAccount(ctx, req.(*AddAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateAccount(ctx, req.(*UpdateAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CheckAccountByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccountByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CheckAccountByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/CheckAccountByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CheckAccountByID(ctx, req.(*CheckAccountByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeleceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeleceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/DeleceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeleceAccount(ctx, req.(*DeleteAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountList",
			Handler:    _AccountService_GetAccountList_Handler,
		},
		{
			MethodName: "GetAccountByMobile",
			Handler:    _AccountService_GetAccountByMobile_Handler,
		},
		{
			MethodName: "GetAccountByID",
			Handler:    _AccountService_GetAccountByID_Handler,
		},
		{
			MethodName: "AddAccount",
			Handler:    _AccountService_AddAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountService_UpdateAccount_Handler,
		},
		{
			MethodName: "CheckAccountByID",
			Handler:    _AccountService_CheckAccountByID_Handler,
		},
		{
			MethodName: "DeleceAccount",
			Handler:    _AccountService_DeleceAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/account.proto",
}
